name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential cmake pkg-config
        sudo apt install -y qtbase5-dev qttools5-dev qtbase5-dev-tools
        sudo apt install -y libssl-dev
        # Install Crypto++ - check available package names
        apt list --available | grep -i crypto || true
        sudo apt install -y libcrypto++-dev || sudo apt install -y libcryptopp-dev || {
          echo "Neither libcrypto++-dev nor libcryptopp-dev found, installing from source"
          wget -q https://github.com/weidai11/cryptopp/releases/download/CRYPTOPP_8_9_0/cryptopp890.zip
          unzip -q cryptopp890.zip -d cryptopp-src
          cd cryptopp-src
          make -j$(nproc) && sudo make install PREFIX=/usr/local
          sudo ldconfig
          cd ..
        }
        sudo apt install -y libboost-all-dev
        sudo apt install -y bc valgrind
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release \
                 -DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/cmake/Qt5
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run Unit Tests
      run: |
        # Update paths in test script for GitHub Actions environment
        cd vm-testing/phase1-unit-tests
        chmod +x run_tests.sh
        # Set environment variables for correct paths
        export PROJECT_ROOT="$GITHUB_WORKSPACE"
        export BUILD_DIR="$GITHUB_WORKSPACE/build"
        ./run_tests.sh
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-linux
        path: |
          vm-testing/phase1-unit-tests/*.log
          vm-testing/phase1-unit-tests/*.json

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake qt5 openssl cryptopp boost
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release \
                 -DCMAKE_PREFIX_PATH=$(brew --prefix qt5)
    
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.logicalcpu)
    
    - name: Run Unit Tests
      run: |
        cd vm-testing/phase1-unit-tests
        chmod +x run_tests.sh
        ./run_tests.sh
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-macos
        path: |
          vm-testing/phase1-unit-tests/*.log
          vm-testing/phase1-unit-tests/*.json

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          C:\vcpkg\installed
          C:\vcpkg\packages
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-
    
    - name: Setup vcpkg
      run: |
        if (-not (Test-Path "C:\vcpkg")) {
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat
        }
        echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
        echo "C:\vcpkg" >> $env:GITHUB_PATH
    
    - name: Install dependencies via vcpkg
      run: |
        C:\vcpkg\vcpkg.exe integrate install
        # Use vcpkg.json for dependency management
        C:\vcpkg\vcpkg.exe install --clean-after-build
    
    - name: Setup Qt5
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        cache: true
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release `
                 -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
                 -DVCPKG_TARGET_TRIPLET=x64-windows
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
    
    - name: Run Unit Tests (PowerShell)
      run: |
        cd vm-testing/phase1-unit-tests
        if (Test-Path "run_tests.ps1") {
          .\run_tests.ps1
        } else {
          Write-Host "PowerShell test script not found, skipping Windows tests"
        }
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-windows
        path: |
          vm-testing/phase1-unit-tests/*.log
          vm-testing/phase1-unit-tests/*.json

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
